
/*
 * Copyright (c) 2015 Luca Burgazzoli
 *
 * https://github.com/lburgazzoli
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// *****************************************************************************
//
// *****************************************************************************

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3'
    }
}

// *****************************************************************************
//
// *****************************************************************************

subprojects {

    plugins {
        id 'java'
        id 'groovy'
        id 'maven'
        id 'idea'
        id 'signing'
        id 'net.researchgate.release' version '2.4.1'
        id 'com.github.ben-manes.versions' version '0.13.0'
        id 'org.springframework.boot' version '1.4.3.RELEASE'
        id 'io.spring.dependency-management' version '1.0.0.RC1'
    }

    apply plugin: 'io.codearte.nexus-staging'

    version             = '1.0.0.SNAPSHOT'
    group               = 'com.github.lburgazzoli'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    
    project.ext {
        isReleaseVersion  = !version.endsWith("SNAPSHOT")
        isSnapshotVersion = version.endsWith("SNAPSHOT")
        isCI              = Boolean.valueOf("$System.env.CI")
        isPR              = "false" != System.env.TRAVIS_PULL_REQUEST 
        gitRoot           = "https://github.com/lburgazzoli"
        gitProject        = "https://github.com/lburgazzoli/lb-spring"
        gitURL            = "git@github.com:lburgazzoli/lb-spring"
        groovyVersion     = GroovySystem.version.replaceAll(/\.\d+$/,'')
        gradleVersion     = '3.2.1'
        gradleScriptDir   = "${rootProject.projectDir}/gradle"
        gradleCiTasks     = (isReleaseVersion || isPR) ? ['clean', 'test'] : ['clean', 'test', 'uploadArchives']

        if (isReleaseVersion) {
            nexusUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        } else {
            nexusUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }

        if(!project.hasProperty('nexusUsername') && !project.hasProperty('nexusPassword')) {
            nexusUsername = "$System.env.CI_DEPLOY_USERNAME"
            nexusPassword = "$System.env.CI_DEPLOY_PASSWORD"
        }

        versions = [
            slf4j              : '1.7.21',
            log4j2             : '2.7',
            jackson            : '2.8.5.1',
            guava              : '20.0',
            commonsLang        : '3.5',
            commonsCollections : '4.1',
            spring             : '4.3.5.RELEASE',
            springBoot         : '1.4.3.RELEASE',
            springCloud        : 'Camden.SR3',
            javaxInject        : '1',
            javaxEl            : '3.0.0',
            hibernateValidator : '5.3.4.Final',
            junit              : '4.12',
            javaSlang          : '2.0.5'
        ]
    }
    
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()


        //maven { url 'http://repo.spring.io/libs-milestone' }
        //maven { url 'http://repo.spring.io/libs-snapshot' }
        //maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

    dependencyManagement {
        imports {
            //mavenBom "com.fasterxml.jackson:jackson-bom:$versions.jackson"
            mavenBom "org.springframework.boot:spring-boot-dependencies:$versions.springBoot"
            //mavenBom "org.springframework.cloud:spring-cloud-dependencies:$versions.springCloud"
        }
    }

    dependencies {
        compile("org.slf4j:slf4j-api") { transitive = false }
        compile("org.slf4j:slf4j-ext") { transitive = false }

        runtime "org.apache.logging.log4j:log4j-api:$versions.log4j2"
        runtime "org.apache.logging.log4j:log4j-core:$versions.log4j2"
        runtime "org.apache.logging.log4j:log4j-jcl:$versions.log4j2"
        runtime "org.apache.logging.log4j:log4j-jul:$versions.log4j2"
        runtime "org.apache.logging.log4j:log4j-slf4j-impl:$versions.log4j2"

        compile "com.google.guava:guava:$versions.guava"
        compile "io.javaslang:javaslang:$versions.javaSlang"

        compile "org.apache.commons:commons-lang3:$versions.commonsLang"
        compile "org.apache.commons:commons-collections4:$versions.commonsCollections"

        compile "javax.inject:javax.inject:$versions.javaxInject"
        compile "javax.el:javax.el-api:$versions.javaxEl"
        compile "org.hibernate:hibernate-validator:$versions.hibernateValidator"

        testCompile "junit:junit:$versions.junit"
        
        /*
        compile("org.springframework:spring-core:$versions.spring") {
            exclude group:'commons-logging', module:'commons-logging'
        }
        compile("org.springframework:spring-context:$versions.spring") {
            exclude group:'commons-logging', module:'commons-logging'
        }
        compile("org.springframework:spring-web:$versions.spring") {
            exclude group:'commons-logging', module:'commons-logging'
        }
        compile("org.springframework.security:spring-security-core:$versions.springSecurity") {
            exclude group:'commons-logging', module:'commons-logging'
        }

        compile "com.fasterxml.jackson.core:jackson-core"
        compile "com.fasterxml.jackson.core:jackson-databind"
        compile "com.fasterxml.jackson.core:jackson-annotations"
        compile "com.fasterxml.jackson.module:jackson-module-afterburner"
        compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
        */
    }

    test {
        testLogging {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
        }
    }

    [compileJava, compileTestJava]*.options*.compilerArgs = [
        "-Xlint:unchecked",
        "-Xlint:deprecation",
    ]

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    dependencyUpdates {
        revision = 'release'
    }

    // *************************************************************************
    //
    // *************************************************************************

    task sourcesJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task groovydocJar(type: Jar, dependsOn: groovydoc) {
        classifier 'groovydoc'
        from groovydoc.destinationDir
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives groovydocJar
        archives javadocJar
        }

    // *************************************************************************
    // Publish to Sonatype OSS
    // *************************************************************************

    signing {
        required {
            isReleaseVersion
        }

        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: project.nexusUrl) {
                    authentication(
                        userName: project.nexusUsername,
                        password: project.nexusPassword
                    )
                }

                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                pom.groupId = project.group
                pom.artifactId = project.name
                pom.version = project.version

                pom.project {
                    name project.name
                    description project.name
                    url project.gitProject

                    scm {
                        url project.gitProject
                        connection "scm:${project.gitProject}"
                        developerConnection "scm:${project.gitURL}"
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'lburgazzoli'
                            name 'Luca Burgazzoli'
                        }
                    }
                }
            }
        }
    }

    // *************************************************************************
    //
    // *************************************************************************

    afterReleaseBuild.dependsOn publishPlugins, uploadArchives

    task ci(dependsOn: project.gradleCiTasks) {
    }

    task close(dependsOn: 'closeAndPromoteRepository') {
    }
}

